{"version":3,"sources":["Title.js","Main.js","Main2.js","serviceWorker.js","index.js"],"names":["Title","className","action","type","value","Main","FormsAndInputs","props","handleInputChange","event","preventDefault","setState","target","name","state","titleVideo","textVideo","this","id","method","placeholder","onChange","selected","$","submit","val","dropdown","ajax","url","data","succes","response","html","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Main2","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAkBeA,MAdf,WAEE,OACE,yBAAKC,UAAU,eACb,qEACA,wBAAIA,UAAU,mBAAd,+CAEA,0BAAMC,OAAO,6DACX,2BAAOD,UAAU,MAAME,KAAK,SAASC,MAAM,8BCEpCC,MAVf,WAEE,OACE,yBAAKJ,UAAU,gBACb,4CACA,0K,2DC8GSK,E,kDAjHb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAaRC,kBAAoB,SAACC,GACnBA,EAAMC,iBACN,EAAKC,SAAL,eACGF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOR,SAfpC,EAAKU,MAAQ,CACXC,WAAY,KACZC,UAAW,MAJG,E,qDA6BR,IACAD,EAAcE,KAAKH,MAAnBC,WACAC,EAAaC,KAAKH,MAAlBE,UAER,OAEE,yBAAKf,UAAU,eAAeiB,GAAG,SAC/B,8EACA,sCACA,0BAAMhB,OAAO,2CAA2CiB,OAAO,OAAOP,OAAO,UAC3E,2BAAG,2BAAOM,GAAG,cAAcf,KAAK,OAAOiB,YAAY,QAAQP,KAAK,aAAaQ,SAAUJ,KAAKT,oBAA5F,IAAmHO,EAAnH,KACA,qCACA,2BAAG,2BAAOG,GAAG,aAAaf,KAAK,OAAOiB,YAAY,OAAOP,KAAK,YAAYQ,SAAUJ,KAAKT,oBAAzF,KAAiHQ,EAAjH,KACA,yDACD,4BAAQE,GAAG,eAAeL,KAAO,YAChC,4BAAQT,MAAQ,sBAAsBkB,UAAQ,GAA9C,uBACA,4BAAQlB,MAAQ,0BAAhB,2BAEA,4BACA,2BAAG,2BAAOc,GAAG,MAAMf,KAAK,SAASC,MAAM,YACvC,uBAAGc,GAAG,kBAGR,+DAiBAK,IAAE,QAAQC,QAAO,SAASf,GACtBA,EAAMC,iBACN,IAAIK,EAAaQ,IAAE,gBAAgBE,MAC/BT,EAAYO,IAAE,eAAeE,MAC7BC,EAAWH,IAAE,iBAAiBE,MAElCF,IAAEI,KAAK,CACHC,IAAK,2CACLzB,KAAM,OACN0B,KAAM,CACJd,WAAYA,EACZC,UAAWA,EACXU,SAAUA,GAGZI,OAAQ,SAASC,GACfR,IAAE,iBAAiBS,KAAKD,SAjClC,W,GArDqBE,aCOTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f82b889.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport { unstable_renderSubtreeIntoContainer } from \"react-dom\";\r\nimport './jekyll-theme-cayman.scss';\r\n\r\nfunction Title(){\r\n\r\n  return(\r\n    <div className=\"page-header\">\r\n      <h1>Classification of Mathematical Videos</h1>\r\n      <h4 className=\"project-tagline\">Epsilon Stream Project, by Angelique Husson</h4>\r\n      {/* <button className=\"btn\" >View on GitHub</button> */}\r\n      <form action=\"https://github.com/AngeliqueHusson/InternshipOneOnEpsilon\">\r\n        <input className=\"btn\" type=\"submit\" value=\"View project on Github\" />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title;","import React, {useState} from \"react\";\r\nimport { unstable_renderSubtreeIntoContainer } from \"react-dom\";\r\nimport './jekyll-theme-cayman.scss';\r\n\r\nfunction Main(){\r\n\r\n  return(\r\n    <div className=\"main-content\">\r\n      <h3>How it works</h3>\r\n      <p>On this webpage you can insert a mathematical video and let our classifcation algorithm categorize it into one of the 11 Math categories.</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main;","import React, {Component} from \"react\";\r\nimport './jekyll-theme-cayman.scss';\r\nimport \"./App.css\";\r\nimport $ from 'jquery'\r\n\r\nclass FormsAndInputs extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      titleVideo: null,\r\n      textVideo: null\r\n    }\r\n\r\n  }\r\n\r\n  // handleSubmit = (event) => {\r\n  //   event.preventDefault()\r\n  //   const data = this.state\r\n  // }\r\n\r\n  handleInputChange = (event) => {\r\n    event.preventDefault()\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  // /* Api call to data that I may need */\r\n  // componentDidMount(){\r\n  //   this.setState({\r\n  //     textVideo: null\r\n  //   })\r\n  // }\r\n\r\n\r\n  render() {\r\n     const {titleVideo} = this.state\r\n     const {textVideo} = this.state\r\n\r\n    return (\r\n\r\n      <div className=\"main-content\" id=\"main2\">\r\n        <h3>Insert the title and the text of a video below</h3>\r\n        <h4>Title:</h4>\r\n        <form action=\"http://localhost:8080/cgi-bin/Website.py\" method=\"post\" target=\"_blank\">\r\n          <p><input id=\"input-title\" type=\"text\" placeholder=\"Title\" name=\"titleVideo\" onChange={this.handleInputChange} /> {titleVideo} </p>     \r\n          <h4>Text:</h4>\r\n          <p><input id=\"input-text\" type=\"text\" placeholder=\"Text\" name=\"textVideo\" onChange={this.handleInputChange} />  {textVideo} </p>\r\n          <h4>Classification algorithm:</h4>\r\n         <select id=\"input-method\" name = \"dropdown\">\r\n          <option value = \"Logistic Regression\" selected>Logistic Regression</option>\r\n          <option value = \"Support Vector Machine\">Support Vector Machine</option>\r\n         </select>\r\n          <p></p>\r\n          <p><input id=\"sub\" type=\"submit\" value=\"Submit\"/></p>\r\n          <p id=\"form-message\"></p>\r\n        </form>\r\n\r\n        <script>\r\n        {/* $(document).ready(function() {\r\n          $(\"form\").submit(function(event) {\r\n            event.preventDefault();\r\n            var titleVideo = $(\"#input-title\").val();\r\n            var textVideo = $(\"#input-text\").val();\r\n            var dropdown = $(\"#input-method\").val();\r\n\r\n            $(\".form-message\").load(\"http://localhost:8080/cgi-bin/Website.py\", {\r\n              titleVideo: titleVideo,\r\n              textVideo: textVideo,\r\n              dropdown: dropdown\r\n            })  \r\n          })\r\n        }); */}\r\n\r\n      $(document).ready(function(){\r\n        $(\"form\").submit(function(event) {\r\n            event.preventDefault();\r\n            var titleVideo = $(\"#input-title\").val();\r\n            var textVideo = $(\"#input-text\").val();\r\n            var dropdown = $(\"#input-method\").val();\r\n\r\n            $.ajax({\r\n                url: \"http://localhost:8080/cgi-bin/Website.py\",\r\n                type: \"POST\",\r\n                data: {\r\n                  titleVideo: titleVideo,\r\n                  textVideo: textVideo,\r\n                  dropdown: dropdown                  \r\n                },\r\n                // dataType: \"text\",\r\n                succes: function(response){\r\n                  $(\"#form-message\").html(response);\r\n                }\r\n                // succes: function(msg){\r\n                //   alert(\"script ran ok\");\r\n                // },\r\n              });\r\n            })\r\n    \t    \r\n            \r\n\r\n            // $(\"#ajaxtest\").load(\"http://localhost:8080/cgi-bin/Website.py\", {\r\n            //   textVideo: {textVideo},\r\n            //   titleVideo: {titleVideo} \r\n            // }, function(){\r\n            //   alert(\"Hi there!\");\r\n            // })\r\n          \t//   })\r\n             });\r\n        </script>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default FormsAndInputs;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Title from './Title';\nimport Main from './Main';\nimport Main2 from './Main2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Title />\n    <Main />\n    <Main2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}